<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Social Recommendation Survey</title>
    <link href="/2022/11/09/Social-recommendation-survey/"/>
    <url>/2022/11/09/Social-recommendation-survey/</url>
    
    <content type="html"><![CDATA[<p>这是图神经网络在社交推荐当中的一个简短的综述。</p><span id="more"></span><h2 id="1-SOCIAL-RECOMMENDATION"><a href="#1-SOCIAL-RECOMMENDATION" class="headerlink" title="1 SOCIAL RECOMMENDATION"></a>1 SOCIAL RECOMMENDATION</h2><p>With the emergence of online social networks, social recommender systems have been proposed to utilize each user’s local neighbors’ preferences to enhance user modeling [43, 65, 103, 104, 172]. All these works assume users with social relationships should have similar representations based on the social influence theory that connected people would influence each other. Some of them directly use such relationship as regularizer to constraint the final user representations [65, 104, 105, 138], while others leverage such relationship as input to enhance the original user embeddings [43, 103]. </p><p>From the perspective of graph learning, the early works mentioned above can be seen as modeling the first-order neighbors of each user. However, in practice, a user might be influenced by her/his friends’ friends. Overlooking the high-order influence diffusion in previous works might lead to the suboptimal recommendation performance [172]. Thanks to the ability of simulating how users are influenced by the recursive social diffusion process, GNN has become a popular choice to model the social information in recommendation.</p><p>To incorporate relationships among users into interaction behaviors by leveraging GNN, there are two main issues to deal with:</p><ul><li><strong>Influence of Friends.</strong> Do friends have equal influence? If not, how to distinguish the influence of different friends?</li><li><strong>Preference Integration.</strong> Users are involved in two types of relationships, i.e., social relationships with their friends and interactions with items. How to integrate the user representations from the social influence perspective and interaction behavior?</li></ul><h3 id="1-1-Influence-of-friends"><a href="#1-1-Influence-of-friends" class="headerlink" title="1.1 Influence of friends"></a>1.1 Influence of friends</h3><p>Generally, a social graph only contains information about whether the users are friends, but the strengths of social ties are usually unknown. To propagate the information of friends, it is essential to decide the influence of friends. DiffNet [172] treats the influence of friends equally by leveraging mean-pooling operation. However, the assumption of equal influence is not in accordance with the actual situation, and the influence of a user is unsuitable to be simply determined by the number of her/his friends. Indeed, users are more likely to be influenced by friends with strong social ties or similar preferences. Therefore, attention mechanism is widely leveraged to differentiate the influence of neighbors [2, 33, 110, 130, 171, 174]. For example, Song et al. [130] propose DGRec, which dynamically infers the influence of neighbors based on their current interests. It first modelsdynamic users’ behaviors with a recurrent neural network, and then acquires the social influence with a graph-attention neural network. Compared to the mean-pooling operation, the attention mechanism boosts the overall performance, which further verifies the assumption that different friends have different influence power.</p><p>Moreover, a recent work, named ESRF [191], argues that social relations are not always reliable. The unreliability of social information lies in two aspects: on the one hand, the users with explicit social connections might have no influence power; on the other hand, the obtained social relationships might be incomplete. Considering that indiscriminately incorporating unreliable social relationships into recommendation may lead to poor performance, ESRP leverages the autoencoder mechanism to modify the observed social relationships by filtering irrelevant relationships and investigating the new neighbors. Similarly, DiffNetLG [129] involves implicit local influence to predict the unobserved social relationship and then utilizes both explicit and implicit social relations to make recommendations.</p><h3 id="1-2-Preference-Integration"><a href="#1-2-Preference-Integration" class="headerlink" title="1.2 Preference Integration"></a>1.2 Preference Integration</h3><p>Users in social recommendatioin are involved in two types of relationships, one is the user-item interactions and the other is the social graph. To enhance the user preference representation by leveraging social information, there are two strategies for combining the information from these two networks,</p><ul><li>to learn the user representation from these two networks respectively [33, 172, 174] and then integrate them into the final preference vector, as illustrated in Figure 7a;</li><li>to combine the two networks into one unified network [171] and apply GNN to propagate information, as illustrated in Figure 7b.</li></ul><p>The advantage of the first strategy lies in two aspects: on the one hand, we can differentiate the depth of diffusion process of two networks since they are treated separately; on the other hand, any advanced method for user-item bipartite graph can be directly applied, and for social network, a homogeneous graph, GNN techniques are extremely suitable for simulating the influence process since they are originally proposed for homogeneous graphs. As for the integration of the user representations learned from two relationships, there are two main mechanisms, i.e., linearity combination and non-linearity combination. Among the linearity combination, DiffNet [172] treats the user representations from two spaces equally, and combines them with a sum-pooling operation. Instead of an equal-weight combination, DANSER [174] dynamically allocates weights according to the user-item paired features. Among the non-linearity combination, multi-layer perceptrons over the concatenated vector are widely adopted to enhance the feature interactions [33, 47, 186].</p><p>The advantage of integrating the two graphs into one unified network is that both the higherorder social influence diffusion in the social network and interest diffusion in the user-item bipartite graph can be simulated in a unified model, and these two kinds of information simultaneously reflect users’ preferences. DiffNet++ [171] designs a two-level attention network to update user nodes at each layer. Specifically, it firstly aggregates the information of neighbors in the bipartite graph (i.e., interacted items) and social network (i.e., friends) by utilizing the GAT mechanism respectively. Considering that different users may have different preferences in balancing these two relationships, it further leverages another attention network to fuse the two hidden states of neighbors. Similarly, SEFrame [20] utilizes a heterogeneous graph network to fuse the knowledge from social relationships, user-item interactions and item transitions from the heterogeneous graph, and employs a two-level attention network for propagation. Up till now, there is no evidence to show which strategy always achieves better performance.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Corresponding to the discussion at the beginning of this section, we briefly summarize the current<br>works in terms of the two issues:</p><ul><li><strong>Influence of Friends.</strong> Compared to assigning equal weights to friends, differentiating the influence of different friends is more appropriate. An emerging direction is to automatically modify the social relationship, which can benefit from the presence of noise in social networks.</li><li><strong>Preference Integration.</strong> The strategies for combining the two sources of information depends on whether to consider the two graphs separately or unify them into one graph. For the separate graphs, user preference is an integration of the overall representations learned from these two graphs. For the unified graph, a commonly adopted strategy is the hierarchical aggregation schema.</li></ul>]]></content>
    
    
    <categories>
      
      <category>图推荐</category>
      
      <category>社交推荐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GNN</tag>
      
      <tag>recommandation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SocialLGN,Light graph convolution network for social recommendation</title>
    <link href="/2022/11/06/SocialLGN/"/>
    <url>/2022/11/06/SocialLGN/</url>
    
    <content type="html"><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>本文提出了社交推荐的两个重大挑战</p><ul><li>如何精确的从交互图和社交图中学习用户和物品的嵌入向量。</li><li>因为用户同时被两个图所影响，如何聚合两个图的信息也是一个巨大挑战。</li></ul><p>据此，本文提出了<strong>SocialLGN</strong>模型，每个用户和物品的特征通过 lightGCN层在交互图的传播，同时，用户的特征也在社交图中传播，我们还设计了一种图融合操作，用于聚合用户的嵌入向量。</p><span id="more"></span><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>用户物品交互图和社交网络图通常被当作两个图来对待（用户物品交互图和社交图），目前有两个方式将图中的用户信息聚合起来：</p><ul><li>一是将两图融合进一个新的异质图；</li><li>二是分别在两个图中学习用户的嵌入向量，在将结果聚合起来，如图1；</li></ul><p><img src="SocialLGN/%E5%88%86%E5%BC%80.png" title="图1 分别学习再聚合"></p><p>这篇论文提出了一个叫<strong>SocialLGN</strong>的基于LightGCN新模型，创新性的利用LightGCN的传播机制融合了两个图的信息，丰富了用户和物品的表示向量。因为用户嵌入向量分别在两个图进行传播，故我们还提出一种新的图融合模型，嵌入到SocialLGN中，他将两个图中的用户嵌入向量聚合起来，丰富了用户嵌入向量的信息。</p><p>主要贡献如下：</p><ul><li>拓展了LightGCN模型，让他可以在社交推荐系统中更加如鱼得水；</li><li>设计了一个新的图融合组件，可以将从两个图中学习到的用户表示向量聚合起来，该组件使用了一个正则化操作，可以防止图卷积层层数增长导致的用户表示向量规模的大幅增长；</li><li>说自己效果杠杠的。</li></ul><h2 id="Design-of-SocialLGN"><a href="#Design-of-SocialLGN" class="headerlink" title="Design of SocialLGN"></a>Design of SocialLGN</h2><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p>主要由3个部分组成：</p><ul><li>一个Embedding层，由用户和物品的IDs，对他们的embedding向量进行初始化</li><li>多个Propagation层，将用户和物品的embedding向量在交互图和社交图中进行传播</li><li>一个预测层，通过最终的embedding向量，对图中任意一条边的值进行预测</li></ul><p>下面展示具体的工作机制。</p><h3 id="Embedding-层"><a href="#Embedding-层" class="headerlink" title="Embedding 层"></a>Embedding 层</h3><p>pass</p><h3 id="Propagation-层"><a href="#Propagation-层" class="headerlink" title="Propagation 层"></a>Propagation 层</h3><p><img src="SocialLGN/SocialLGN.png" title="图2 模型结构"></p><p>在第 $k$ 个propagation层中，从$k-1$层获取embedding向量，然后输出更新后的embedding向量。<br>$$<br>\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}<br>$$<br>对于用户$u$来说，我们同时使用两个图对其进行更新，并从$k-1$层将其输出（表示为${e}^{(k-1)}<em>u$），做完以后得到从交互图和社交图的用户向量分别为${q}^{(k)}</em>{u}$和${p}^{(k)}<em>u$:<br>$$<br>{q}^{(k)}</em>{u}=\sum_{i\in N_u^I} \frac{1}{\sqrt{N^I_u} \sqrt{N^I_i}}{e}^{(k-1)}_i<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>图推荐</category>
      
      <category>社交推荐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GNN</tag>
      
      <tag>recommandation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二篇博客</title>
    <link href="/2022/11/05/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/11/05/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>这里是摘要哦！</p><span id="more"></span><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>emmm，简简单单测试一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LightGCN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config, dataset</span>):<br>        <span class="hljs-built_in">super</span>(LightGCN, self).__init__()<br>        self.config = config<br>        self.dataset = dataset<br>        self._init_weight()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_init_weight</span>(<span class="hljs-params">self</span>):<br>        self.num_users = self.dataset.n_users<br>        self.num_items = self.dataset.m_items<br>        self.latent_dim = self.config[<span class="hljs-string">&#x27;latent_dim_rec&#x27;</span>]<br>        self.n_layers = self.config[<span class="hljs-string">&#x27;layer&#x27;</span>]<br>        self.embedding_user = torch.nn.Embedding(<br>            num_embeddings=self.num_users, embedding_dim=self.latent_dim)<br>        self.embedding_item = torch.nn.Embedding(<br>            num_embeddings=self.num_items, embedding_dim=self.latent_dim)<br><br>        nn.init.normal_(self.embedding_user.weight, std=<span class="hljs-number">0.1</span>)<br>        nn.init.normal_(self.embedding_item.weight, std=<span class="hljs-number">0.1</span>)<br>        self.f = nn.Sigmoid()<br>        self.interactionGraph = self.dataset.getInteractionGraph()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;world.model_name&#125;</span> is already to go&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">computer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        propagate methods for lightGCN</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        users_emb = self.embedding_user.weight<br>        items_emb = self.embedding_item.weight<br>        all_emb = torch.cat([users_emb, items_emb])<br>        <span class="hljs-comment">#   torch.split(all_emb , [self.num_users, self.num_items])</span><br>        embs = [all_emb]<br>        G = self.interactionGraph<br><br>        <span class="hljs-keyword">for</span> layer <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.n_layers):<br>            all_emb = torch.sparse.mm(G, all_emb)<br>            embs.append(all_emb)<br>        embs = torch.stack(embs, dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># print(embs.size())</span><br>        light_out = torch.mean(embs, dim=<span class="hljs-number">1</span>)<br>        users, items = torch.split(light_out, [self.num_users, self.num_items])<br>        self.final_user, self.final_item = users, items<br>        <span class="hljs-keyword">return</span> users, items<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getUsersRating</span>(<span class="hljs-params">self, users</span>):<br>        all_users, all_items = self.final_user, self.final_item<br>        users_emb = all_users[users.long()]<br>        items_emb = all_items<br>        rating = self.f(torch.matmul(users_emb, items_emb.t()))<br>        <span class="hljs-keyword">return</span> rating<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getEmbedding</span>(<span class="hljs-params">self, users, pos_items, neg_items</span>):<br>        all_users, all_items = self.computer()<br>        users_emb = all_users[users]<br>        pos_emb = all_items[pos_items]<br>        neg_emb = all_items[neg_items]<br>        users_emb_ego = self.embedding_user(users)<br>        pos_emb_ego = self.embedding_item(pos_items)<br>        neg_emb_ego = self.embedding_item(neg_items)<br>        <span class="hljs-keyword">return</span> users_emb, pos_emb, neg_emb, users_emb_ego, pos_emb_ego, neg_emb_ego<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bpr_loss</span>(<span class="hljs-params">self, users, pos, neg</span>):<br>        (users_emb, pos_emb, neg_emb,<br>         userEmb0, posEmb0, negEmb0) = self.getEmbedding(users.long(), pos.long(), neg.long())<br>        reg_loss = (<span class="hljs-number">1</span> / <span class="hljs-number">2</span>) * (userEmb0.norm(<span class="hljs-number">2</span>).<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>) +<br>                              posEmb0.norm(<span class="hljs-number">2</span>).<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>) +<br>                              negEmb0.norm(<span class="hljs-number">2</span>).<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>)) / <span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(users))<br>        pos_scores = torch.mul(users_emb, pos_emb)<br>        pos_scores = torch.<span class="hljs-built_in">sum</span>(pos_scores, dim=<span class="hljs-number">1</span>)<br>        neg_scores = torch.mul(users_emb, neg_emb)<br>        neg_scores = torch.<span class="hljs-built_in">sum</span>(neg_scores, dim=<span class="hljs-number">1</span>)<br><br>        loss = torch.mean(torch.nn.functional.softplus(neg_scores - pos_scores))<br><br>        <span class="hljs-keyword">return</span> loss, reg_loss<br></code></pre></td></tr></table></figure><img src="C:\Users\32517\Pictures\SocialLGN.png" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
      <category>测试一</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试嗷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My New Post</title>
    <link href="/2022/11/05/My-New-Post/"/>
    <url>/2022/11/05/My-New-Post/</url>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>代码测试：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">py <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br></code></pre></td></tr></table></figure><p>图片测试： <img src="http://mculover666.cn/blog/20191031/R4mWMXsrRKxu.png?imageslim"> 引用测试：</p><blockquote><p>这是一条引用</p></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>无序列表测试：</p><ul><li>哈哈</li><li>嘿嘿</li><li>吼吼</li></ul><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4>]]></content>
    
    
    
    <tags>
      
      <tag>测试嗷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/04/hello-world/"/>
    <url>/2022/11/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>

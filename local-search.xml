<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第二篇博客</title>
    <link href="/2022/11/05/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/11/05/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>这里是摘要哦！</p><span id="more"></span><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>emmm，简简单单测试一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LightGCN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config, dataset</span>):<br>        <span class="hljs-built_in">super</span>(LightGCN, self).__init__()<br>        self.config = config<br>        self.dataset = dataset<br>        self._init_weight()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_init_weight</span>(<span class="hljs-params">self</span>):<br>        self.num_users = self.dataset.n_users<br>        self.num_items = self.dataset.m_items<br>        self.latent_dim = self.config[<span class="hljs-string">&#x27;latent_dim_rec&#x27;</span>]<br>        self.n_layers = self.config[<span class="hljs-string">&#x27;layer&#x27;</span>]<br>        self.embedding_user = torch.nn.Embedding(<br>            num_embeddings=self.num_users, embedding_dim=self.latent_dim)<br>        self.embedding_item = torch.nn.Embedding(<br>            num_embeddings=self.num_items, embedding_dim=self.latent_dim)<br><br>        nn.init.normal_(self.embedding_user.weight, std=<span class="hljs-number">0.1</span>)<br>        nn.init.normal_(self.embedding_item.weight, std=<span class="hljs-number">0.1</span>)<br>        self.f = nn.Sigmoid()<br>        self.interactionGraph = self.dataset.getInteractionGraph()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;world.model_name&#125;</span> is already to go&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">computer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        propagate methods for lightGCN</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        users_emb = self.embedding_user.weight<br>        items_emb = self.embedding_item.weight<br>        all_emb = torch.cat([users_emb, items_emb])<br>        <span class="hljs-comment">#   torch.split(all_emb , [self.num_users, self.num_items])</span><br>        embs = [all_emb]<br>        G = self.interactionGraph<br><br>        <span class="hljs-keyword">for</span> layer <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.n_layers):<br>            all_emb = torch.sparse.mm(G, all_emb)<br>            embs.append(all_emb)<br>        embs = torch.stack(embs, dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># print(embs.size())</span><br>        light_out = torch.mean(embs, dim=<span class="hljs-number">1</span>)<br>        users, items = torch.split(light_out, [self.num_users, self.num_items])<br>        self.final_user, self.final_item = users, items<br>        <span class="hljs-keyword">return</span> users, items<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getUsersRating</span>(<span class="hljs-params">self, users</span>):<br>        all_users, all_items = self.final_user, self.final_item<br>        users_emb = all_users[users.long()]<br>        items_emb = all_items<br>        rating = self.f(torch.matmul(users_emb, items_emb.t()))<br>        <span class="hljs-keyword">return</span> rating<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getEmbedding</span>(<span class="hljs-params">self, users, pos_items, neg_items</span>):<br>        all_users, all_items = self.computer()<br>        users_emb = all_users[users]<br>        pos_emb = all_items[pos_items]<br>        neg_emb = all_items[neg_items]<br>        users_emb_ego = self.embedding_user(users)<br>        pos_emb_ego = self.embedding_item(pos_items)<br>        neg_emb_ego = self.embedding_item(neg_items)<br>        <span class="hljs-keyword">return</span> users_emb, pos_emb, neg_emb, users_emb_ego, pos_emb_ego, neg_emb_ego<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bpr_loss</span>(<span class="hljs-params">self, users, pos, neg</span>):<br>        (users_emb, pos_emb, neg_emb,<br>         userEmb0, posEmb0, negEmb0) = self.getEmbedding(users.long(), pos.long(), neg.long())<br>        reg_loss = (<span class="hljs-number">1</span> / <span class="hljs-number">2</span>) * (userEmb0.norm(<span class="hljs-number">2</span>).<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>) +<br>                              posEmb0.norm(<span class="hljs-number">2</span>).<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>) +<br>                              negEmb0.norm(<span class="hljs-number">2</span>).<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>)) / <span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(users))<br>        pos_scores = torch.mul(users_emb, pos_emb)<br>        pos_scores = torch.<span class="hljs-built_in">sum</span>(pos_scores, dim=<span class="hljs-number">1</span>)<br>        neg_scores = torch.mul(users_emb, neg_emb)<br>        neg_scores = torch.<span class="hljs-built_in">sum</span>(neg_scores, dim=<span class="hljs-number">1</span>)<br><br>        loss = torch.mean(torch.nn.functional.softplus(neg_scores - pos_scores))<br><br>        <span class="hljs-keyword">return</span> loss, reg_loss<br></code></pre></td></tr></table></figure><img src="C:\Users\32517\Pictures\SocialLGN.png" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
      <category>测试一</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试嗷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My New Post</title>
    <link href="/2022/11/05/My-New-Post/"/>
    <url>/2022/11/05/My-New-Post/</url>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>代码测试：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">py <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br></code></pre></td></tr></table></figure><p>图片测试： <img src="http://mculover666.cn/blog/20191031/R4mWMXsrRKxu.png?imageslim"> 引用测试：</p><blockquote><p>这是一条引用</p></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>无序列表测试：</p><ul><li>哈哈</li><li>嘿嘿</li><li>吼吼</li></ul><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4>]]></content>
    
    
    
    <tags>
      
      <tag>测试嗷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/04/hello-world/"/>
    <url>/2022/11/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
